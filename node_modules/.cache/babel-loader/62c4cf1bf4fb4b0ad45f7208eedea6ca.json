{"ast":null,"code":"// import auth from \"../api/authentication\"\n// import * as errorMessages  from '../constants/MessageConstants';\n// import history from '../history';\n// import jwt_decode from 'jwt-decode';\n//\n//\n// //LOGIN\n// export const REQUEST_LOGIN = 'REQUEST_LOGIN';\n// export const RECEIVE_LOGIN = 'RECEIVE_LOGIN';\n// export const ERROR_LOGIN= \"ERROR_LOGIN\";\n// export const CHANGE_LOGIN= \"CHANGE_LOGIN\";\n// export const CHANGE_USER= \"CHANGE_USER\";\n// export const RESET_LOGIN = 'RESET_LOGIN';\n// export const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\n// export const LOGOUT_REQUEST = 'LOGOUT_REQUEST';\n//\n// export function login(usuario) {\n//     return (dispatch) => {\n//         dispatch(sendingRequest(true));\n//         // If no username or password was specified, throw a field-missing error\n//         if (anyElementsEmpty(usuario)) {\n//             dispatch(sendingRequest(false));\n//             dispatch(errorLogin(\"Completa los campos\"));\n//             return;\n//         }\n//         auth.login(usuario, (success, error) => {\n//             // When the request is finished, hide the loading indicator\n//             //dispatch(sendingRequest(false));\n//\n//             if (success === true) {\n//                 dispatch(receiveLogin(success));\n//                 //guardo usuario logueado\n//                 var datos = jwt_decode(localStorage.token);\n//                 dispatch(changeUser(datos.nombreUsuario));\n//                 // If the login worked, forward the user to the dashboard and clear the form\n//                 dispatch(changeLogin({\n//                     nombreUsuario: \"\",\n//                     password: \"\"\n//                 }));\n//                 history.push(\"/jugadores\");\n//             } else {\n//                 switch (error.status) {\n//                     case 401:\n//                         dispatch(errorLogin(errorMessages.UNAUTHORIZED_TOKEN));\n//                         dispatch(logout());\n//                         return;\n//                     default:\n//                         try {\n//                             error.json()\n//                                 .then((error) => {\n//                                     if (error.message != \"\")\n//                                         dispatch(errorLogin(error.message));\n//                                     else\n//                                         dispatch(errorLogin(errorMessages.GENERAL_ERROR));\n//                                 })\n//                                 .catch((error) => {\n//                                     dispatch(errorLogin(errorMessages.GENERAL_ERROR));\n//                                 });\n//                         }catch (e){}\n//                         return;\n//                 }\n//             }\n//             // });\n//         });\n//     }\n// }\n//\n// function requestLogout() {\n//     return {\n//         type: LOGOUT_REQUEST,\n//         isFetching: true,\n//         isAuthenticated: true,\n//     };\n// }\n//\n// export function receiveLogout() {\n//     return {\n//         type: LOGOUT_SUCCESS,\n//         isFetching: false,\n//         isAuthenticated: false,\n//     };\n// }\n//\n// export function logout() {\n//     return (dispatch) => {\n//         dispatch(requestLogout());\n//         //dispatch(resetCreateUsuario());\n//         //dispatch(resetUpdateUsuarioLogueado());\n//         localStorage.removeItem('token');\n//         document.cookie = 'id_token=;expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n//         dispatch(receiveLogout());\n//         window.location.reload;\n//\n//\n//     };\n// }\n//\n//\n// export function sendingRequest(sending) {\n//     return {type: REQUEST_LOGIN, sending};\n// }\n//\n// export function receiveLogin(token) {\n//     return {type: RECEIVE_LOGIN, token};\n// }\n//\n// export function changeLogin(usuario) {\n//     return {type: CHANGE_LOGIN, usuario: usuario};\n// }\n//\n// export function changeUser(nombreUsuario) {\n//     return {type: CHANGE_USER, nombreUsuario: nombreUsuario};\n// }\n// export function resetLogin() {\n//     return {\n//         type: RESET_LOGIN\n//     }\n// }\n// function errorLogin(error) {\n//     return {\n//         type: ERROR_LOGIN,\n//         error: error,\n//     }\n// }\n//\n// function anyElementsEmpty(elements) {\n//     for (let element in elements) {\n//         if (!elements[element]) {\n//             return true;\n//         }\n//     }\n//     return false;\n// }\n//\n// export function olvideMiPassword(usuario) {\n//     return (dispatch) => {\n//         dispatch(sendingRequest(true));\n//         // If no username or password was specified, throw a field-missing error\n//         if (usuario==\"\") {\n//             dispatch(sendingRequest(false));\n//             dispatch(errorLogin(\"Debe ingresar su usuario para iniciar el proceso de recuperaciÃ³n.\"));\n//             return;\n//         }\n//         auth.olvideMiPassword(usuario, (success, error) => {\n//             // When the request is finished, hide the loading indicator\n//             if (success === true) {\n//                 dispatch(sendingRequest(false));\n//             } else {\n//                 switch (error.status) {\n//                     case 401:\n//                         dispatch(errorLogin(errorMessages.UNAUTHORIZED_TOKEN));\n//                         dispatch(logout());\n//                         return;\n//                     default:\n//                         try {\n//                             error.json()\n//                                 .then((error) => {\n//                                     if (error.message != \"\")\n//                                         dispatch(errorLogin(error.message));\n//                                     else\n//                                         dispatch(errorLogin(errorMessages.GENERAL_ERROR));\n//                                 })\n//                                 .catch((error) => {\n//                                     dispatch(errorLogin(errorMessages.GENERAL_ERROR));\n//                                 });\n//                         }catch (e){}\n//                         return;\n//                 }\n//             }\n//             // });\n//         });\n//     }\n// }\n//\n// export function resetPassword(usuario) {\n//     return (dispatch) => {\n//         dispatch(sendingRequest(true));\n//         auth.resetPassword(usuario, (success, error) => {\n//             // When the request is finished, hide the loading indicator\n//             dispatch(sendingRequest(false));\n//             if (success === true) {\n//                 history.replace('/login', null);\n//             } else {\n//                 switch (error.status) {\n//                     case 401:\n//                         dispatch(errorLogin(errorMessages.UNAUTHORIZED_TOKEN));\n//                         dispatch(logout());\n//                         return;\n//                     default:\n//                         try {\n//                             error.json()\n//                                 .then((error) => {\n//                                     if (error.message != \"\")\n//                                         dispatch(errorLogin(error.message));\n//                                     else\n//                                         dispatch(errorLogin(errorMessages.GENERAL_ERROR));\n//                                 })\n//                                 .catch((error) => {\n//                                     dispatch(errorLogin(errorMessages.GENERAL_ERROR));\n//                                 });\n//                         }catch (e){}\n//                         return;\n//                 }\n//             }\n//             // });\n//         });\n//     }\n// }\n//\n// export function validarToken(token) {\n//     return (dispatch) => {\n//         //dispatch(sendingRequest(true));\n//         auth.validarToken(token, (success, error) => {\n//             // When the request is finished, hide the loading indicator\n//             //dispatch(sendingRequest(false));\n//             if (success === true) {\n//\n//             } else {\n//                 switch (error.status) {\n//                     case 401:\n//                         dispatch(errorLogin(errorMessages.UNAUTHORIZED_TOKEN));\n//                         dispatch(logout());\n//                         return;\n//                     default:\n//                         try {\n//                             error.json()\n//                                 .then((error) => {\n//                                     if (error.message != \"\")\n//                                         dispatch(errorLogin(error.message));\n//                                     else\n//                                         dispatch(errorLogin(errorMessages.GENERAL_ERROR));\n//                                 })\n//                                 .catch((error) => {\n//                                     dispatch(errorLogin(errorMessages.GENERAL_ERROR));\n//                                 });\n//                         }catch (e){}\n//                         return;\n//                 }\n//             }\n//             // });\n//         });\n//     }\n// }","map":{"version":3,"sources":["/home/mark/Workspace/QuieroIP/src/actions/AuthenticationActions.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import auth from \"../api/authentication\"\n// import * as errorMessages  from '../constants/MessageConstants';\n// import history from '../history';\n// import jwt_decode from 'jwt-decode';\n//\n//\n// //LOGIN\n// export const REQUEST_LOGIN = 'REQUEST_LOGIN';\n// export const RECEIVE_LOGIN = 'RECEIVE_LOGIN';\n// export const ERROR_LOGIN= \"ERROR_LOGIN\";\n// export const CHANGE_LOGIN= \"CHANGE_LOGIN\";\n// export const CHANGE_USER= \"CHANGE_USER\";\n// export const RESET_LOGIN = 'RESET_LOGIN';\n// export const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\n// export const LOGOUT_REQUEST = 'LOGOUT_REQUEST';\n//\n// export function login(usuario) {\n//     return (dispatch) => {\n//         dispatch(sendingRequest(true));\n//         // If no username or password was specified, throw a field-missing error\n//         if (anyElementsEmpty(usuario)) {\n//             dispatch(sendingRequest(false));\n//             dispatch(errorLogin(\"Completa los campos\"));\n//             return;\n//         }\n//         auth.login(usuario, (success, error) => {\n//             // When the request is finished, hide the loading indicator\n//             //dispatch(sendingRequest(false));\n//\n//             if (success === true) {\n//                 dispatch(receiveLogin(success));\n//                 //guardo usuario logueado\n//                 var datos = jwt_decode(localStorage.token);\n//                 dispatch(changeUser(datos.nombreUsuario));\n//                 // If the login worked, forward the user to the dashboard and clear the form\n//                 dispatch(changeLogin({\n//                     nombreUsuario: \"\",\n//                     password: \"\"\n//                 }));\n//                 history.push(\"/jugadores\");\n//             } else {\n//                 switch (error.status) {\n//                     case 401:\n//                         dispatch(errorLogin(errorMessages.UNAUTHORIZED_TOKEN));\n//                         dispatch(logout());\n//                         return;\n//                     default:\n//                         try {\n//                             error.json()\n//                                 .then((error) => {\n//                                     if (error.message != \"\")\n//                                         dispatch(errorLogin(error.message));\n//                                     else\n//                                         dispatch(errorLogin(errorMessages.GENERAL_ERROR));\n//                                 })\n//                                 .catch((error) => {\n//                                     dispatch(errorLogin(errorMessages.GENERAL_ERROR));\n//                                 });\n//                         }catch (e){}\n//                         return;\n//                 }\n//             }\n//             // });\n//         });\n//     }\n// }\n//\n// function requestLogout() {\n//     return {\n//         type: LOGOUT_REQUEST,\n//         isFetching: true,\n//         isAuthenticated: true,\n//     };\n// }\n//\n// export function receiveLogout() {\n//     return {\n//         type: LOGOUT_SUCCESS,\n//         isFetching: false,\n//         isAuthenticated: false,\n//     };\n// }\n//\n// export function logout() {\n//     return (dispatch) => {\n//         dispatch(requestLogout());\n//         //dispatch(resetCreateUsuario());\n//         //dispatch(resetUpdateUsuarioLogueado());\n//         localStorage.removeItem('token');\n//         document.cookie = 'id_token=;expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n//         dispatch(receiveLogout());\n//         window.location.reload;\n//\n//\n//     };\n// }\n//\n//\n// export function sendingRequest(sending) {\n//     return {type: REQUEST_LOGIN, sending};\n// }\n//\n// export function receiveLogin(token) {\n//     return {type: RECEIVE_LOGIN, token};\n// }\n//\n// export function changeLogin(usuario) {\n//     return {type: CHANGE_LOGIN, usuario: usuario};\n// }\n//\n// export function changeUser(nombreUsuario) {\n//     return {type: CHANGE_USER, nombreUsuario: nombreUsuario};\n// }\n// export function resetLogin() {\n//     return {\n//         type: RESET_LOGIN\n//     }\n// }\n// function errorLogin(error) {\n//     return {\n//         type: ERROR_LOGIN,\n//         error: error,\n//     }\n// }\n//\n// function anyElementsEmpty(elements) {\n//     for (let element in elements) {\n//         if (!elements[element]) {\n//             return true;\n//         }\n//     }\n//     return false;\n// }\n//\n// export function olvideMiPassword(usuario) {\n//     return (dispatch) => {\n//         dispatch(sendingRequest(true));\n//         // If no username or password was specified, throw a field-missing error\n//         if (usuario==\"\") {\n//             dispatch(sendingRequest(false));\n//             dispatch(errorLogin(\"Debe ingresar su usuario para iniciar el proceso de recuperaciÃ³n.\"));\n//             return;\n//         }\n//         auth.olvideMiPassword(usuario, (success, error) => {\n//             // When the request is finished, hide the loading indicator\n//             if (success === true) {\n//                 dispatch(sendingRequest(false));\n//             } else {\n//                 switch (error.status) {\n//                     case 401:\n//                         dispatch(errorLogin(errorMessages.UNAUTHORIZED_TOKEN));\n//                         dispatch(logout());\n//                         return;\n//                     default:\n//                         try {\n//                             error.json()\n//                                 .then((error) => {\n//                                     if (error.message != \"\")\n//                                         dispatch(errorLogin(error.message));\n//                                     else\n//                                         dispatch(errorLogin(errorMessages.GENERAL_ERROR));\n//                                 })\n//                                 .catch((error) => {\n//                                     dispatch(errorLogin(errorMessages.GENERAL_ERROR));\n//                                 });\n//                         }catch (e){}\n//                         return;\n//                 }\n//             }\n//             // });\n//         });\n//     }\n// }\n//\n// export function resetPassword(usuario) {\n//     return (dispatch) => {\n//         dispatch(sendingRequest(true));\n//         auth.resetPassword(usuario, (success, error) => {\n//             // When the request is finished, hide the loading indicator\n//             dispatch(sendingRequest(false));\n//             if (success === true) {\n//                 history.replace('/login', null);\n//             } else {\n//                 switch (error.status) {\n//                     case 401:\n//                         dispatch(errorLogin(errorMessages.UNAUTHORIZED_TOKEN));\n//                         dispatch(logout());\n//                         return;\n//                     default:\n//                         try {\n//                             error.json()\n//                                 .then((error) => {\n//                                     if (error.message != \"\")\n//                                         dispatch(errorLogin(error.message));\n//                                     else\n//                                         dispatch(errorLogin(errorMessages.GENERAL_ERROR));\n//                                 })\n//                                 .catch((error) => {\n//                                     dispatch(errorLogin(errorMessages.GENERAL_ERROR));\n//                                 });\n//                         }catch (e){}\n//                         return;\n//                 }\n//             }\n//             // });\n//         });\n//     }\n// }\n//\n// export function validarToken(token) {\n//     return (dispatch) => {\n//         //dispatch(sendingRequest(true));\n//         auth.validarToken(token, (success, error) => {\n//             // When the request is finished, hide the loading indicator\n//             //dispatch(sendingRequest(false));\n//             if (success === true) {\n//\n//             } else {\n//                 switch (error.status) {\n//                     case 401:\n//                         dispatch(errorLogin(errorMessages.UNAUTHORIZED_TOKEN));\n//                         dispatch(logout());\n//                         return;\n//                     default:\n//                         try {\n//                             error.json()\n//                                 .then((error) => {\n//                                     if (error.message != \"\")\n//                                         dispatch(errorLogin(error.message));\n//                                     else\n//                                         dispatch(errorLogin(errorMessages.GENERAL_ERROR));\n//                                 })\n//                                 .catch((error) => {\n//                                     dispatch(errorLogin(errorMessages.GENERAL_ERROR));\n//                                 });\n//                         }catch (e){}\n//                         return;\n//                 }\n//             }\n//             // });\n//         });\n//     }\n// }"]},"metadata":{},"sourceType":"module"}