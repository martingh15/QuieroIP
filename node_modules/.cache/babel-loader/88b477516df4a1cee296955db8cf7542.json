{"ast":null,"code":"import jwt_decode from \"jwt-decode\";\nimport c from \"../constants/Constants\"; // require('es6-promise').polyfill();\n\nrequire('isomorphic-fetch');\n/**\n * Authentication lib\n * @type {Object}\n */\n\n\nvar auth = {\n  /**\n   * Logs a user in\n   * @param  {string}   username The username of the user\n   * @param  {string}   password The password of the user\n   * @param  {Function} callback Called after a user was logged in on the remote server\n   */\n  login: function login(usuario, callback) {\n    // If there is a token in the localStorage, the user already is\n    // authenticated\n    if (this.loggedIn()) {\n      callback(true);\n      return;\n    }\n\n    var defaultOptions = {\n      url: '',\n      method: 'POST',\n      mode: 'cors',\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        \"Content-Type\": \"application/json;charset=UTF-8\"\n      },\n      body: JSON.stringify(usuario),\n      // cache: false,\n      dataType: 'json'\n    };\n    console.log(JSON.stringify(usuario));\n    fetch(c.BASE_URL + '/loginWeb', defaultOptions).then(function (response) {\n      if (response.status >= 400) {\n        //callback(false, response);\n        return Promise.reject(response);\n      } else {\n        var data = response.json();\n        return data;\n      }\n    }).then(function (data) {\n      localStorage.token = data.token;\n      callback(true);\n    }).catch(function (error) {\n      callback(false, error);\n    });\n  },\n\n  /**\n   * Logs the current user out\n   */\n  logout: function logout(callback) {\n    localStorage.removeItem('token');\n    callback(true);\n    /*request.post('/logout', {}, () => {\n     callback(true);\n     });*/\n  },\n\n  /**\n   * Checks if anybody is logged in\n   * @return {boolean} True if there is a logged in user, false if there isn't\n   */\n  loggedIn: function loggedIn() {\n    console.log('logueado?', !!localStorage.token);\n    return !!localStorage.token;\n  },\n  rol: function rol() {\n    if (localStorage.token) return jwt_decode(localStorage.token).rol;\n  },\n  nombreUsuario: function nombreUsuario() {\n    if (localStorage.token) return jwt_decode(localStorage.token).nombre;\n  },\n  idUsuario: function idUsuario() {\n    if (localStorage.token) {\n      return jwt_decode(localStorage.token).idUsuario;\n    }\n  },\n  olvideMiPassword: function olvideMiPassword(usuario, callback) {\n    // If there is a token in the localStorage, the user already is\n    // authenticated\n    if (this.loggedIn()) {\n      callback(true);\n      return;\n    }\n\n    var defaultOptions = {\n      url: '',\n      method: 'POST',\n      mode: 'cors',\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        \"Content-Type\": \"application/json;charset=UTF-8\"\n      },\n      body: JSON.stringify({\n        nombreUsuario: usuario\n      }),\n      // cache: false,\n      dataType: 'json'\n    };\n    fetch(c.BASE_URL + '/olvideMiPassword', defaultOptions).then(function (response) {\n      if (response.status >= 400) {\n        //callback(false, response);\n        return Promise.reject(response);\n      } else {\n        callback(true);\n      }\n    }).catch(function (error) {\n      callback(false, error);\n    });\n  },\n  resetPassword: function resetPassword(usuario, callback) {\n    // If there is a token in the localStorage, the user already is\n    // authenticated\n    if (this.loggedIn()) {\n      callback(true);\n      return;\n    }\n\n    var defaultOptions = {\n      url: '',\n      method: 'POST',\n      mode: 'cors',\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        \"Content-Type\": \"application/json;charset=UTF-8\"\n      },\n      body: JSON.stringify(usuario),\n      // cache: false,\n      dataType: 'json'\n    };\n    fetch(c.BASE_URL + '/resetPassword', defaultOptions).then(function (response) {\n      if (response.status >= 400) {\n        //callback(false, response);\n        return Promise.reject(response);\n      } else {\n        callback(true);\n      }\n    }).catch(function (error) {\n      callback(false, error);\n    });\n  },\n  validarToken: function validarToken(token, callback) {\n    // If there is a token in the localStorage, the user already is\n    // authenticated\n    if (this.loggedIn()) {\n      callback(true);\n      return;\n    }\n\n    var defaultOptions = {\n      url: '',\n      method: 'POST',\n      mode: 'cors',\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        \"Content-Type\": \"application/json;charset=UTF-8\"\n      },\n      body: JSON.stringify({\n        tokenReset: token\n      }),\n      // cache: false,\n      dataType: 'json'\n    };\n    fetch(c.BASE_URL + '/validarToken', defaultOptions).then(function (response) {\n      if (response.status >= 400) {\n        //callback(false, response);\n        return Promise.reject(response);\n      } else {\n        callback(true);\n      }\n    }).catch(function (error) {\n      callback(false, error);\n    });\n  }\n};\nexport default auth;","map":{"version":3,"sources":["/home/mark/Workspace/QuieroIP/src/api/authentication.js"],"names":["jwt_decode","c","require","auth","login","usuario","callback","loggedIn","defaultOptions","url","method","mode","headers","body","JSON","stringify","dataType","console","log","fetch","BASE_URL","then","response","status","Promise","reject","data","json","localStorage","token","catch","error","logout","removeItem","rol","nombreUsuario","nombre","idUsuario","olvideMiPassword","resetPassword","validarToken","tokenReset"],"mappings":"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","sourcesContent":["import jwt_decode from \"jwt-decode\";\nimport c from \"../constants/Constants\";\n// require('es6-promise').polyfill();\nrequire('isomorphic-fetch');\n\n\n/**\n * Authentication lib\n * @type {Object}\n */\nvar auth = {\n    /**\n     * Logs a user in\n     * @param  {string}   username The username of the user\n     * @param  {string}   password The password of the user\n     * @param  {Function} callback Called after a user was logged in on the remote server\n     */\n    login(usuario, callback) {\n        // If there is a token in the localStorage, the user already is\n        // authenticated\n        if (this.loggedIn()) {\n            callback(true);\n            return;\n        }\n\n        let defaultOptions = {\n            url:'',\n            method:'POST',\n            mode: 'cors',\n            headers:{\n                'Access-Control-Allow-Origin':'*',\n                \"Content-Type\": \"application/json;charset=UTF-8\",\n            },\n            body: JSON.stringify(usuario),\n            // cache: false,\n            dataType: 'json',\n        };\n        console.log(JSON.stringify(usuario));\n        fetch(c.BASE_URL + '/loginWeb', defaultOptions)\n            .then(function(response) {\n                if (response.status >= 400) {\n                    //callback(false, response);\n                    return Promise.reject(response);\n                }\n                else {\n\n                    var data = response.json();\n\n                    return data;\n                }\n            })\n            .then(function(data) {\n                localStorage.token = data.token;\n                callback(true);\n            })\n            .catch(function (error) {\n                callback(false, error);\n            });\n    },\n    /**\n     * Logs the current user out\n     */\n    logout(callback) {\n        localStorage.removeItem('token');\n        callback(true);\n        /*request.post('/logout', {}, () => {\n         callback(true);\n         });*/\n    },\n    /**\n     * Checks if anybody is logged in\n     * @return {boolean} True if there is a logged in user, false if there isn't\n     */\n    loggedIn() {\n\n        console.log('logueado?',!!localStorage.token);\n        return !!localStorage.token;\n    },\n\n    rol() {\n        if(localStorage.token)\n            return jwt_decode(localStorage.token).rol;\n    },\n    nombreUsuario() {\n        if(localStorage.token)\n            return jwt_decode(localStorage.token).nombre;\n    },\n    idUsuario() {\n        if(localStorage.token){\n            return jwt_decode(localStorage.token).idUsuario;\n        }\n    },\n    olvideMiPassword(usuario, callback) {\n        // If there is a token in the localStorage, the user already is\n        // authenticated\n        if (this.loggedIn()) {\n            callback(true);\n            return;\n        }\n\n        let defaultOptions = {\n            url:'',\n            method:'POST',\n            mode: 'cors',\n            headers:{\n                'Access-Control-Allow-Origin':'*',\n                \"Content-Type\": \"application/json;charset=UTF-8\"\n            },\n            body: JSON.stringify({nombreUsuario:usuario}),\n            // cache: false,\n            dataType: 'json',\n        };\n        fetch(c.BASE_URL + '/olvideMiPassword', defaultOptions)\n            .then(function(response) {\n                if (response.status >= 400) {\n                    //callback(false, response);\n                    return Promise.reject(response);\n                }\n                else {\n                    callback(true);\n                }\n            })\n            .catch(function (error) {\n                callback(false, error);\n            });\n    },\n    resetPassword(usuario, callback) {\n        // If there is a token in the localStorage, the user already is\n        // authenticated\n        if (this.loggedIn()) {\n            callback(true);\n            return;\n        }\n\n        let defaultOptions = {\n            url:'',\n            method:'POST',\n            mode: 'cors',\n            headers:{\n                'Access-Control-Allow-Origin':'*',\n                \"Content-Type\": \"application/json;charset=UTF-8\"\n            },\n            body: JSON.stringify(usuario),\n            // cache: false,\n            dataType: 'json',\n        };\n        fetch(c.BASE_URL + '/resetPassword', defaultOptions)\n            .then(function(response) {\n                if (response.status >= 400) {\n                    //callback(false, response);\n                    return Promise.reject(response);\n                }\n                else {\n                    callback(true);\n                }\n            })\n            .catch(function (error) {\n                callback(false, error);\n            });\n    },\n    validarToken(token, callback) {\n        // If there is a token in the localStorage, the user already is\n        // authenticated\n        if (this.loggedIn()) {\n            callback(true);\n            return;\n        }\n\n        let defaultOptions = {\n            url:'',\n            method:'POST',\n            mode: 'cors',\n            headers:{\n                'Access-Control-Allow-Origin':'*',\n                \"Content-Type\": \"application/json;charset=UTF-8\"\n            },\n            body: JSON.stringify({tokenReset:token}),\n            // cache: false,\n            dataType: 'json',\n        };\n        fetch(c.BASE_URL + '/validarToken', defaultOptions)\n            .then(function(response) {\n                if (response.status >= 400) {\n                    //callback(false, response);\n                    return Promise.reject(response);\n                }\n                else {\n                    callback(true);\n                }\n            })\n            .catch(function (error) {\n                callback(false, error);\n            });\n    },\n};\n\nexport default auth;\n"]},"metadata":{},"sourceType":"module"}